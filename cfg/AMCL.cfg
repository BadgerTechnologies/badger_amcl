#!/usr/bin/env python3

PACKAGE = 'badger_amcl'

from math import pi
from dynamic_reconfigure.parameter_generator_catkin import ParameterGenerator, int_t, double_t, str_t, bool_t

gen = ParameterGenerator()

map_type_enum = gen.enum([ gen.const("OccupancyMap", int_t, 2, "Use a static occupancy map"),
                           gen.const("OctoMap", int_t, 3, "Use a static OctoMap")
                         ], "Type of static map to use for localization")

gen.add("map_type", int_t, 0, "Type of static map to use", 3, edit_method=map_type_enum)

gen.add("min_particles", int_t, 0, "Minimum allowed number of particles.", 100, 0, 1000)
gen.add("max_particles", int_t, 0, "Mamimum allowed number of particles.", 5000, 0, 10000)

gen.add("kld_err",  double_t, 0, "Maximum error between the true distribution and the estimated distribution.", .01, 0, 1)
gen.add("kld_z", double_t, 0, "Upper standard normal quantile for (1 - p), where p is the probability that the error on the estimated distrubition will be less than kld_err.", .99, 0, 1)

gen.add("update_min_d", double_t, 0, "Translational movement required before performing a filter update.", .2, 0, 5)
gen.add("update_min_a", double_t, 0, "Rotational movement required before performing a filter update.", pi/6, 0, 2*pi)

gen.add("resample_interval", int_t, 0, "Number of filter updates required before resampling.", 2, 0, 20)

rmt = gen.enum([gen.const("multinomial_const", str_t, "multinomial", "Use multinomial resampling"), gen.const("systematic_const", str_t, "systematic", "Use systematic sampling.")], "Resample Models")
gen.add("resample_model_type", str_t, 0, "Which resample model to use, either multinomial (default), or systematic.", "multinomial", edit_method=rmt)

gen.add("transform_tolerance", double_t, 0, "Time with which to post-date the transform that is published, to indicate that this transform is valid into the future.", .1, 0, 2)

gen.add("recovery_alpha_slow", double_t, 0, "Exponential decay rate for the slow average weight filter, used in deciding when to recover by adding random poses. A good value might be 0.001.", 0, 0, .5)
gen.add("recovery_alpha_fast", double_t, 0, "Exponential decay rate for the fast average weight filter, used in deciding when to recover by adding random poses. A good value might be 0.1.", 0, 0, 1)

gen.add("uniform_pose_starting_weight_threshold", double_t, 0, "When adding uniform poses, attempt to pick a pose with at least this sample weight according to the sensor model.", 0.0, 0.0, 10.0)
gen.add("uniform_pose_deweight_multiplier", double_t, 0, "When adding uniform poses, deweight uniform_pose_starting_weight_threshold by this multiplier for each try. This guarantees that we will eventually find a pose.", 0.0, 0.0, 1.0)

gen.add("global_localization_alpha_slow", double_t, 0, "During global localization, override recovery alpha_slow to this value. A good value might be 0.001.", 0, 0, .5)
gen.add("global_localization_alpha_fast", double_t, 0, "During global localization, override recovery alpha_fast to this value. A good value might be 0.1.", 0, 0, 1)

gen.add("do_beamskip", bool_t, 0, "When true skips scans when a scan doesnt work for a majority of particles", False)
gen.add("beam_skip_distance", double_t, 0, "Distance from a valid map point before scan is considered invalid", 0, 2, 0.5)
gen.add("beam_skip_threshold", double_t, 0, "Ratio of samples for which the scans are valid to consider as valid scan", 0, 1, 0.3)

gen.add("tf_broadcast", bool_t, 0, "When true (the default), publish results via TF.  When false, do not.", True)
gen.add("tf_reverse", bool_t, 0, "When set to true, reverse published TF.", False)
gen.add("gui_publish_rate", double_t, 0, "Maximum rate (Hz) at which scans and paths are published for visualization, -1.0 to disable.", -1, -1, 100)
gen.add("transform_publish_rate", double_t, 0, "Rate (Hz) at which to publish the transform between map and odom to tf.", 50.0, 0.1, 100.0)
gen.add("save_pose_to_file_rate", double_t, 0, "Maximum rate (Hz) at which to store the last estimated pose and covariance to file. This saved pose will be used on subsequent runs to initialize the filter if the param server does not have the parameters stored. 0.0 to disable.", 0.1, 0.0, 10.0)

gen.add("use_map_topic", bool_t, 0, "When set to true, AMCL will subscribe to the map topic rather than making a service call to receive its map.", False)
gen.add("first_map_only", bool_t, 0, "When set to true, AMCL will only use the first map it subscribes to, rather than updating each time a new one is received.", False)
gen.add("wait_for_occupancy_map", bool_t, 0, "When set to true and map type is OctoMap, AMCL will wait for the occupancy map message before creating the OctoMap", True)

# Model Parameters
gen.add("laser_min_range", double_t, 0, "Minimum scan range to be considered; -1.0 will cause the scanner's reported minimum range to be used.", -1, -1, 1000)
gen.add("laser_max_range", double_t, 0, "Maximum scan range to be considered; -1.0 will cause the scanner's reported maximum range to be used.", -1, -1, 1000)

gen.add("laser_max_beams", int_t, 0, "How many evenly-spaced beams in each scan to be used when updating the filter.", 30, 0, 100)

gen.add("laser_z_hit", double_t, 0, "Mixture weight for the z_hit part of the model.", .95, 0, 10)
gen.add("laser_z_short", double_t, 0, "Mixture weight for the z_short part of the model.", .1, 0, 10)
gen.add("laser_z_max", double_t, 0, "Mixture weight for the z_max part of the model.", .05, 0, 10)
gen.add("laser_z_rand", double_t, 0, "Mixture weight for the z_rand part of the model.", .05, 0, 10)

gen.add("laser_gompertz_a", double_t, 0, "Gompertz a coefficient for gompertz sample weight function", 1.0, 0.0, 10.0)
gen.add("laser_gompertz_b", double_t, 0, "Gompertz b coefficient for gompertz sample weight function", 1.0, 0.0, 10.0)
gen.add("laser_gompertz_c", double_t, 0, "Gompertz c coefficient for gompertz sample weight function", 1.0, 0.0, 10.0)
gen.add("laser_gompertz_input_shift", double_t, 0, "Shift input value to gompertz function (after input scaling)", 0.0, -10.0, 10.0)
gen.add("laser_gompertz_input_scale", double_t, 0, "Scale input value to gompertz function (before input shifting)", 1.0, 0.0, 10.0)
gen.add("laser_gompertz_output_shift", double_t, 0, "Shift output value of gompertz function", 0.0, -10.0, 10.0)

# There is no option for output scale since the output will just be normalized by the particle filter

gen.add("laser_sigma_hit", double_t, 0, "Standard deviation for Gaussian model used in z_hit part of the model.", .2, 0, 10)
gen.add("laser_lambda_short", double_t, 0, "Exponential decay parameter for z_short part of model.", .1, 0, 10)
gen.add("laser_likelihood_max_dist", double_t, 0, "Maximum distance to do obstacle inflation on map, for use in likelihood_field model.", 2, 0, 20)
gen.add("laser_off_map_factor", double_t, 0, "Factor applied to particle weights out of the map bounds.", 1.0, 0.0, 1.0)
gen.add("laser_non_free_space_factor", double_t, 0, "Factor applied ot particle weights not in free space.", 1.0, 0.0, 1.0)
gen.add("laser_non_free_space_radius", double_t, 0, "Radius used to interpolate laser_non_free_space_factor near non free space.", 0.0, 0.0, 10.0)
gen.add("global_localization_laser_off_map_factor", double_t, 0, "During global localization, Factor applied to particle weights out of the map bounds.", 1.0, 0.0, 1.0)
gen.add("global_localization_laser_non_free_space_factor", double_t, 0, "During global localization, override factor applied ot particle weights not in free space.", 1.0, 0.0, 1.0)

lmt = gen.enum([
               gen.const("beam_const", str_t, "beam", "Use beam laser model"),
               gen.const("likelihood_field_const", str_t, "likelihood_field",
                         "Use likelihood_field laser model"),
               gen.const("likelihood_field_prob_const", str_t,
                         "likelihood_field_prob",
                         "Use probablistic likelihood field model"),
               gen.const("likelihood_field_gompertz_const", str_t,
                         "likelihood_field_gompertz",
                         "Use likelihood field model with gompertz sample weighting"),
               ], "Laser Scanner Models")
gen.add("laser_model_type", str_t, 0, "Which laser sensor model to use.", "likelihood_field", edit_method=lmt)

# Odometry Model Parameters
odt = gen.enum([gen.const("diff_const", str_t, "diff", "Use diff odom model"),
                gen.const("omni_const", str_t, "omni", "Use omni odom model"),
                gen.const("diff_corrected_const", str_t, "diff-corrected", "Use corrected diff odom model"),
                gen.const("omni_corrected_const", str_t, "omni-corrected", "Use corrected omni odom model"),
                gen.const("gaussian_const", str_t, "gaussian", "Use gaussian model")],
               "Odom Models")
gen.add("odom_model_type", str_t, 0, "Which model to use, diff, omni, diff-corrected, omni-corrected, or guassian", "diff", edit_method=odt)

gen.add("odom_alpha1", double_t, 0, "Specifies the expected noise in odometry's rotation estimate from the rotational component of the robot's motion.", .2, 0, 10)
gen.add("odom_alpha2", double_t, 0, "Specifies the expected noise in odometry's rotation estimate from the translational component of the robot's motion.", .2, 0, 10)
gen.add("odom_alpha3", double_t, 0, "Specifies the expected noise in odometry's translation estimate from the translational component of the robot's motion.", .2, 0, 10)
gen.add("odom_alpha4", double_t, 0, "Specifies the expected noise in odometry's translation  estimate from the rotational component of the robot's motion.", .2, 0, 10)
gen.add("odom_alpha5", double_t, 0, "Specified the expected noise in odometry's sideways translation estimate from the sideways translational component of the robot's motion.", .2, 0, 10)

gen.add("odom_frame_id", str_t, 0, "Which frame to use for odometry.", "odom")
gen.add("base_frame_id", str_t, 0, "Which frame to use for the robot base.", "base_link")
gen.add("global_frame_id", str_t, 0, "The name of the common coordinate frame.", "map")
gen.add("transform_frame_id", str_t, 0, "The name of the coordinate frame published by the localization system.", "map")

gen.add("off_object_penalty_factor", double_t, 0, "Penalty factor for points that miss an object on the static map.", 1000.0, 0.0, 100000.0)

gen.add("restore_defaults", bool_t, 0, "Retsore the default configuration", False)

gen.add("save_pose", bool_t, 0, "If the node should save the pose to the param server and to a persistent file.", True)
gen.add("saved_pose_filepath", str_t, 0, "Path of file to store saved poses.", "badger_amcl_saved_pose.yaml")

exit(gen.generate(PACKAGE, "badger_amcl", "AMCL"))
